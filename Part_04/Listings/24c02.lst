C51 COMPILER V9.60.7.0   24C02                                                             09/23/2024 15:48:09 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE 24C02
OBJECT MODULE PLACED IN .\Objects\24c02.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE 24c02.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\24c
                    -02.lst) TABS(2) OBJECT(.\Objects\24c02.obj)

line level    source

   1          #include <reg51.h>
   2          #include "LCD.h"
   3          #include "I2C.h"
   4          #include "24C02.h"
   5          
   6          
   7          void write_byte_to_24c02_eeprom (unsigned int address,unsigned char databyte)
   8          {
   9   1        I2C_START();
  10   1        while(I2C_WRITE_BYTE(DEVICE_ADDRESS_24C02_EEPROM + 0)==1)
  11   1        {
  12   2          I2C_START();
  13   2        }
  14   1        I2C_WRITE_BYTE(address>>8);
  15   1        I2C_WRITE_BYTE((unsigned char)address);
  16   1        I2C_WRITE_BYTE(databyte);
  17   1        I2C_STOP();
  18   1      }
  19          unsigned char read_byte_from_24c02_eeprom (unsigned int address)
  20          {
  21   1        unsigned char Byte=0;
  22   1        I2C_START();
  23   1        while(I2C_WRITE_BYTE(DEVICE_ADDRESS_24C02_EEPROM +0)==1)
  24   1        {
  25   2          I2C_START();
  26   2        }
  27   1        I2C_WRITE_BYTE(address>>8);
  28   1        I2C_WRITE_BYTE((unsigned char)address);
  29   1        I2C_RESTART();
  30   1        
  31   1        I2C_WRITE_BYTE(DEVICE_ADDRESS_24C02_EEPROM+1);
  32   1        
  33   1        Byte=I2C_READ_BYTE();
  34   1        
  35   1        I2C_NACK();
  36   1        SET_SDA_LOW;
  37   1        delay1(5);
  38   1        SET_SDA_HIGH;
  39   1        delay1(5);
  40   1        return Byte;
  41   1      }
  42          // Function Purpose: Write_Page_To_24LC64_EEPROM writes a page on given address
  43          // Address can have value 0, 32, 64, .... only and pData is pointer to the array
  44          // containing NoOfBytes bytes in it. NoOfBytes can have a value from 1 to 32 only.
  45          void Write_Page_To_24C02_EEPROM(unsigned int Address,unsigned char* pData,unsigned char NoOfBytes)
  46          {
  47   1        unsigned int i;
  48   1      
  49   1        I2C_START();                    // Start i2c communication
  50   1      
  51   1        // Send i2c address of 24LC64 with write command
  52   1        while(I2C_WRITE_BYTE(DEVICE_ADDRESS_24C02_EEPROM + 0) == 1)// Wait until device is free
  53   1        { I2C_START();  } 
  54   1      
C51 COMPILER V9.60.7.0   24C02                                                             09/23/2024 15:48:09 PAGE 2   

  55   1        I2C_WRITE_BYTE(Address>>8);             // Write Address upper byte
  56   1        I2C_WRITE_BYTE((unsigned char)Address);       // Write Address lower byte
  57   1      
  58   1        for(i=0;i<NoOfBytes;i++)              // Write NoOfBytes
  59   1          I2C_WRITE_BYTE(pData[i]);           // Write data byte
  60   1      
  61   1          I2C_STOP();                   // Stop i2c communication
  62   1      }
  63          
  64          
  65          
  66          
  67          // Function Purpose: Read_Bytes_From_24LC64_EEPROM reads a NoOfBytes bytes from given starting address.
  68          // Address can have any value fromm 0 to 0x1FFF. Also, NoOfBytes can have any value 0 to 0x1FFF.
  69          // Read bytes are returned in pData array.
  70          void Read_Bytes_From_24C02_EEPROM(unsigned int Address, unsigned char* pData, unsigned int NoOfBytes)
  71          {
  72   1        unsigned int i;
  73   1      
  74   1        I2C_START();                                                    // Start i2c communication
  75   1      
  76   1                                                                              // Send i2c address of 24LC64 with 
             -write command
  77   1        while(I2C_WRITE_BYTE(DEVICE_ADDRESS_24C02_EEPROM+ 0) == 1)                         // Wait until device i
             -s free
  78   1        { I2C_START();  }   
  79   1      
  80   1        I2C_WRITE_BYTE(Address>>8);                                                         // Write Address upper byte
  81   1        I2C_WRITE_BYTE((unsigned char)Address);                                 // Write Address lower byte
  82   1        I2C_RESTART();                                                            // Restart i2c
  83   1      
  84   1                                                                                           // Send i2c address of
             - 24LC64 EEPROM with read command  
  85   1        I2C_WRITE_BYTE(DEVICE_ADDRESS_24C02_EEPROM + 1);    
  86   1      
  87   1        pData[0] =I2C_READ_BYTE();                                        // Read First byte from EEPROM
  88   1      
  89   1        for(i=1;i<NoOfBytes;i++)                                // Read NoOfBytes
  90   1        {   
  91   2          I2C_ACK();                                   // Give Ack to slave to start receiving next byte
  92   2          pData[i] = I2C_READ_BYTE();                                           // Read next byte from EEPROM
  93   2        }
  94   1      
  95   1                                                             // Make SCK low, so that slave can stop driving SDA 
             -pin
  96   1                                                              // Send a NACK to indiacate read operation is compl
             -ete
  97   1        I2C_NACK();
  98   1      
  99   1                                                             // Send start bit and then stop bit to stop transmis
             -sion
 100   1        SET_SDA_LOW;                                      // Make SDA Low
 101   1        delay1(5);                        // Half bit delay
 102   1        SET_SDA_HIGH;                                   // Make SDA high
 103   1        delay1(5);                      // Half bit delay
 104   1      }
 105          
 106          //void Write_Page_To_24C02_EEPROM (unsigned int address , unsigned char* pData, unsigned char noofbytes )
 107          //{
 108          //  unsigned int i;
 109          //  I2C_START();
 110          //  while(I2C_WRITE_BYTE(DEVICE_ADDRESS_24C02_EEPROM +0)==1)
C51 COMPILER V9.60.7.0   24C02                                                             09/23/2024 15:48:09 PAGE 3   

 111          //  {
 112          //    I2C_START();
 113          //  }
 114          //  I2C_WRITE_BYTE(address>>8);
 115          //  I2C_WRITE_BYTE((unsigned char)address);
 116          //  
 117          //  for(i=1; i<noofbytes; i++)
 118          //  {
 119          //    I2C_WRITE_BYTE(pData[i]);
 120          //    I2C_STOP();
 121          //  }
 122          //  
 123          //}
 124          
 125          //void Read_Bytes_From_24C02_EEPROM(unsigned int address ,unsigned char*pData,unsigned int noofbytes)
 126          //{
 127          //  unsigned int i;
 128          //  I2C_START();
 129          //  while(I2C_WRITE_BYTE(DEVICE_ADDRESS_24C02_EEPROM +0)==1)
 130          //  {
 131          //    I2C_START();
 132          //  }
 133          //  I2C_WRITE_BYTE(address>>8);
 134          //  I2C_WRITE_BYTE((unsigned char)address);
 135          //  
 136          //  I2C_RESTART();
 137          //  I2C_WRITE_BYTE(DEVICE_ADDRESS_24C02_EEPROM +1);
 138          //  
 139          //  pData[0]=I2C_READ_BYTE();
 140          //  
 141          //  for(i=0; i<noofbytes; i++)
 142          //  {
 143          //    I2C_ACK();
 144          //    pData[i]=I2C_READ_BYTE();
 145          //  }
 146          //  I2C_NACK();
 147          //  SET_SDA_LOW;
 148          //  delay1(5);
 149          //  SET_SDA_HIGH;
 150          //  delay1(5);
 151          //}
 152          
 153          void delay_ms (unsigned int ms)
 154          {
 155   1        unsigned int i, j;
 156   1        for(i=0; i<ms; i++)
 157   1        for(j=0; j<112; j++);
 158   1      }
 159          
 160          
 161          
 162          
 163          
 164          
 165          
 166          
 167          
 168          
 169          


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.7.0   24C02                                                             09/23/2024 15:48:09 PAGE 4   

   CODE SIZE        =    349    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
